id_rsa_to_container() { 
  has_input_args=$(if [[ $(for i in $@; do echo $i; done | wc -l) -eq 0 ]]; then echo false; else echo true; fi)
  if [[ $has_input_args == 'true' ]]; then 
    for container in $@; do 
      docker exec -it $container bash -c "gosu user mkdir /home/user/.ssh"
      docker cp ~/.ssh/id_rsa ${container}:/home/user/.ssh/
    done
  else
    if [ $(which docker | wc -l) -eq 0 ] ; then
      echo "Docker not found. Are you on the host?"
      elif [ $(docker container ls -q | wc -l) -eq 0 ]; then
      echo "No currently running containers"
      elif [ $(docker container ls -q | wc -l) -eq 1 ]; then
      echo "Copying id_rsa to container $(docker container ls -q)"
      docker cp ~/.ssh/id_rsa $(docker container ls -q):/home/user/.ssh/
      elif [ $(docker container ls -q | wc -l) -gt 1 ]; then
      echo "More than one container is running"
    fi
  fi
}
initialise_container() {
  docker start $1
  id_rsa_to_container $1
  docker exec -it $1 bash -c "gosu user wget bit.ly/tom_setup -O /tmp/tom_setup && gosu user sudo chmod +x /tmp/tom_setup && gosu user bash /tmp/tom_setup -b true -t true"
}
docker_create() {
while [[ $# > 1 ]]
do
	key="$1"

	case $key in
		-nv|--nvidia_version)
			NVIDIA_VERSION="$2"
			shift
			;;
		-x|--xauth)
			XAUTH="$2"
			shift
			;;			
		-c|--container_name)
			CONTAINER_NAME="$2"
			shift
			;;			
		-i|--image)
			IMAGE="$2"
			shift
			;;
		-b|--bash)
			BASH="$2"
			shift
			;;			
		*)
			# ignore unknown option
			;;
	esac
	shift
done

if [ -z "${XAUTH}" ]; then
  if [ -z "${NVIDIA_VERSION}" ]; then echo "Please specify nvidia version (e.g. -nv 2)" ; return ; fi
fi
if [ -z "${CONTAINER_NAME}" ]; then echo "Please specify desired container name (-c)" ; return ; fi
if [ -z "${IMAGE}" ]; then echo "Please specify image name (-i)" ; return ; fi
if [ -z "${XAUTH}" ]; then XAUTH="false" echo "xauth not specified, setting to false. re-run with -x true to enable"; return ; fi

CONTAINER_NAME="${CONTAINER_NAME}_nv${NVIDIA_VERSION}"

if [[ $XAUTH == "true" ]]; then
  docker create -it --name $CONTAINER_NAME --net=host --privileged -e DISPLAY -e QT_X11_NO_MITSHM=1 -e LOCAL_USER_ID=$(id -u) -v ~/.Xauthority:/home/user/.Xauthority -v /tmp/.X11-unix:/tmp/.X11-unix:rw $IMAGE $BASH
  return
fi  
if [[ $NVIDIA_VERSION == "0" ]]; then
  docker create -it --privileged --name $CONTAINER_NAME --ulimit core=-1 --security-opt seccomp=unconfined --network=host --pid=host -e DISPLAY -e QT_X11_NO_MITSHM=1 -e LOCAL_USER_ID=$(id -u) -v /tmp/.X11-unix:/tmp/.X11-unix:rw $IMAGE $BASH
elif  [[ $NVIDIA_VERSION == "1" ]]; then
  nvidia-docker create -it --privileged --name $CONTAINER_NAME --ulimit core=-1 --security-opt seccomp=unconfined --network=host --pid=host -e DISPLAY -e QT_X11_NO_MITSHM=1 -e LOCAL_USER_ID=$(id -u) -v /tmp/.X11-unix:/tmp/.X11-unix:rw $IMAGE $BASH
elif  [[ $NVIDIA_VERSION == "2" ]]; then
   docker create -it --privileged --name $CONTAINER_NAME --ulimit core=-1 --security-opt seccomp=unconfined --runtime=nvidia -e NVIDIA_DRIVER_CAPABILITIES=all -e NVIDIA_VISIBLE_DEVICES=all --network=host --pid=host -e DISPLAY -e QT_X11_NO_MITSHM=1 -e LOCAL_USER_ID=$(id -u) -v /tmp/.X11-unix:/tmp/.X11-unix:rw $IMAGE $BASH && initialise_container $CONTAINER_NAME
fi
}
